#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 5
            }
            dictionary Perspective = {
                double3 position = (0.06333264886017462, 0.063332766689688, 0.06333264886017581)
                double3 target = (-3.978038368157577e-8, 7.956076886195262e-8, -3.978038248808602e-8)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 5
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 5
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./square_table_leg1.usd"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    metersPerUnit = 0.01
    upAxis = "Y"
)

def Xform "World" (
    kind = "component"
)
{
    rel material:binding = </World/Looks/OmniPBR> (
        bindMaterialAs = "weakerThanDescendants"
    )
    quatf xformOp:orient = (1, 0, 0, 0)
    float3 xformOp:scale = (1, 1, 1)
    double3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Scope "Looks"
    {
        def Material "OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0, 0, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0, 0, 0) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:emissive_color = (0, 0.1, 0) (
                    customData = {
                        float3 default = (1, 0.1, 0.1)
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Color"
                    doc = "The emission color"
                    hidden = false
                )
                float inputs:emissive_intensity = 40.7 (
                    customData = {
                        float default = 40
                    }
                    displayGroup = "Emissive"
                    displayName = "Emissive Intensity"
                    doc = "Intensity of the emission"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }
    }

    def Xform "background"
    {
        quatf xformOp:orient = (1, 0, 0, 0)
        float3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Mesh "Cube_001"
        {
            float3[] extent = [(-0.00648, 0.688786, -0.75), (1.40648, 1.211214, 0.75)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 5, 4, 4, 5, 6, 5, 7, 6, 6, 7, 0, 7, 1, 0, 2, 4, 6, 2, 6, 0, 5, 3, 7, 3, 1, 7]
            rel material:binding = </World/Looks/Material_002>
            normal3f[] normals = [(0.342, -0.9397, -0), (0.342, -0.9397, -0), (0.342, -0.9397, -0), (0.342, -0.9397, -0), (0.342, -0.9397, -0), (0.342, -0.9397, -0), (-0.9397, -0.342, -0), (-0.9397, -0.342, -0), (-0.9397, -0.342, -0), (-0.9397, -0.342, -0), (-0.9397, -0.342, -0), (-0.9397, -0.342, -0), (-0.342, 0.9397, -0), (-0.342, 0.9397, -0), (-0.342, 0.9397, -0), (-0.342, 0.9397, -0), (-0.342, 0.9397, -0), (-0.342, 0.9397, -0), (0.9397, 0.342, -0), (0.9397, 0.342, -0), (0.9397, 0.342, -0), (0.9397, 0.342, -0), (0.9397, 0.342, -0), (0.9397, 0.342, -0), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(1.40648, 1.201817, -0.75), (1.40648, 1.201817, 0.75), (-0.003059, 0.688786, -0.75), (-0.003059, 0.688786, 0.75), (-0.00648, 0.698183, -0.75), (-0.00648, 0.698183, 0.75), (1.403059, 1.211214, -0.75), (1.403059, 1.211214, 0.75)]
            float2[] primvars:st = [(0.333134, 0.333134), (0.0002, 0.333134), (0.333134, 0.0002), (0.0002, 0.333134), (0.0002, 0.0002), (0.333134, 0.0002), (0.333533, 0.333533), (0.666467, 0.333533), (0.333533, 0.666467), (0.666467, 0.333533), (0.666467, 0.666467), (0.333533, 0.666467), (0.333133, 0.9998), (0.0002, 0.9998), (0.333133, 0.666867), (0.0002, 0.9998), (0.0002, 0.666866), (0.333133, 0.666867), (0.666467, 0.333134), (0.333533, 0.333134), (0.666467, 0.0002), (0.333533, 0.333134), (0.333533, 0.0002), (0.666467, 0.0002), (0.0002, 0.333533), (0.333133, 0.333533), (0.333133, 0.666467), (0.0002, 0.333533), (0.333133, 0.666467), (0.0002, 0.666467), (0.9998, 0.333134), (0.666866, 0.333134), (0.9998, 0.0002), (0.666866, 0.333134), (0.666866, 0.0002), (0.9998, 0.0002)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Cube_002"
        {
            float3[] extent = [(-0.00648, -1.211214, -0.75), (1.40648, -0.688786, 0.75)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 5, 4, 4, 5, 6, 5, 7, 6, 6, 7, 0, 7, 1, 0, 2, 4, 0, 4, 6, 0, 5, 3, 1, 5, 1, 7]
            rel material:binding = </World/Looks/Material_003>
            normal3f[] normals = [(0.342, 0.9397, -0), (0.342, 0.9397, -0), (0.342, 0.9397, -0), (0.342, 0.9397, -0), (0.342, 0.9397, -0), (0.342, 0.9397, -0), (0.9397, -0.342, -0), (0.9397, -0.342, -0), (0.9397, -0.342, -0), (0.9397, -0.342, -0), (0.9397, -0.342, -0), (0.9397, -0.342, -0), (-0.342, -0.9397, -0), (-0.342, -0.9397, -0), (-0.342, -0.9397, -0), (-0.342, -0.9397, -0), (-0.342, -0.9397, -0), (-0.342, -0.9397, -0), (-0.9397, 0.342, -0), (-0.9397, 0.342, -0), (-0.9397, 0.342, -0), (-0.9397, 0.342, -0), (-0.9397, 0.342, -0), (-0.9397, 0.342, -0), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.003059, -0.688786, -0.75), (-0.003059, -0.688786, 0.75), (1.40648, -1.201817, -0.75), (1.40648, -1.201817, 0.75), (1.403059, -1.211214, -0.75), (1.403059, -1.211214, 0.75), (-0.00648, -0.698183, -0.75), (-0.00648, -0.698183, 0.75)]
            float2[] primvars:st = [(0.333134, 0.333134), (0.0002, 0.333134), (0.333134, 0.0002), (0.0002, 0.333134), (0.0002, 0.0002), (0.333134, 0.0002), (0.333533, 0.333533), (0.666467, 0.333533), (0.333533, 0.666467), (0.666467, 0.333533), (0.666467, 0.666467), (0.333533, 0.666467), (0.333133, 0.9998), (0.0002, 0.9998), (0.333133, 0.666867), (0.0002, 0.9998), (0.0002, 0.666866), (0.333133, 0.666867), (0.666467, 0.333134), (0.333533, 0.333134), (0.666467, 0.0002), (0.333533, 0.333134), (0.333533, 0.0002), (0.666467, 0.0002), (0.0002, 0.333533), (0.333133, 0.333533), (0.0002, 0.666467), (0.333133, 0.333533), (0.333133, 0.666467), (0.0002, 0.666467), (0.9998, 0.333134), (0.666866, 0.333134), (0.666866, 0.0002), (0.9998, 0.333134), (0.666866, 0.0002), (0.9998, 0.0002)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }

        def Mesh "Cube_003"
        {
            float3[] extent = [(-0.005, -0.75, -0.75), (0.005, 0.75, 0.75)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 1, 2, 1, 3, 2, 2, 3, 4, 3, 5, 4, 4, 5, 6, 5, 7, 6, 6, 7, 0, 7, 1, 0, 2, 4, 0, 4, 6, 0, 5, 3, 7, 3, 1, 7]
            rel material:binding = </World/Looks/Material_004>
            normal3f[] normals = [(-1, -0, -0), (-1, -0, -0), (-1, -0, -0), (-1, -0, -0), (-1, -0, -0), (-1, -0, -0), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (-0, 1, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (1, -0, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -1, -0), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, -1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1), (-0, -0, 1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(-0.005, -0.75, -0.75), (-0.005, -0.75, 0.75), (-0.005, 0.75, -0.75), (-0.005, 0.75, 0.75), (0.005, 0.75, -0.75), (0.005, 0.75, 0.75), (0.005, -0.75, -0.75), (0.005, -0.75, 0.75)]
            float2[] primvars:st = [(0.333134, 0.333134), (0.0002, 0.333134), (0.333134, 0.0002), (0.0002, 0.333134), (0.0002, 0.0002), (0.333134, 0.0002), (0.333533, 0.333533), (0.666467, 0.333533), (0.333533, 0.666467), (0.666467, 0.333533), (0.666467, 0.666467), (0.333533, 0.666467), (0.333133, 0.9998), (0.0002, 0.9998), (0.333133, 0.666867), (0.0002, 0.9998), (0.0002, 0.666866), (0.333133, 0.666867), (0.666467, 0.333134), (0.333533, 0.333134), (0.666467, 0.0002), (0.333533, 0.333134), (0.333533, 0.0002), (0.666467, 0.0002), (0.0002, 0.333533), (0.333133, 0.333533), (0.0002, 0.666467), (0.333133, 0.333533), (0.333133, 0.666467), (0.0002, 0.666467), (0.9998, 0.333134), (0.666866, 0.333134), (0.9998, 0.0002), (0.666866, 0.333134), (0.666866, 0.0002), (0.9998, 0.0002)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
        }
    }
}

